"use strict";(self.webpackChunkgoji_js_org=self.webpackChunkgoji_js_org||[]).push([[117],{876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,h=c["".concat(p,".").concat(m)]||c[m]||d[m]||i;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8965:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(8427),a=(n(2784),n(876));const i={sidebar_position:5},o="Testing Library",l={unversionedId:"advanced/testing",id:"advanced/testing",title:"Testing Library",description:"Purpose",source:"@site/docs/advanced/testing.md",sourceDirName:"advanced",slug:"/advanced/testing",permalink:"/docs/advanced/testing",draft:!1,editUrl:"https://github.com/airbnb/goji-js/tree/main/packages/goji.js.org/docs/advanced/testing.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Plugins",permalink:"/docs/advanced/plugins"},next:{title:"Sub Packages",permalink:"/docs/advanced/sub-packages"}},p={},s=[{value:"Purpose",id:"purpose",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2},{value:"API",id:"api",level:2},{value:"<code>render</code>",id:"render",level:3},{value:"<code>render</code> Options",id:"render-options",level:3},{value:"Queries",id:"queries",level:4},{value:"<code>debug</code>",id:"debug",level:4},{value:"<code>within</code>",id:"within",level:3},{value:"<code>fireEvent</code>",id:"fireevent",level:3},{value:"<code>act</code>",id:"act",level:3},{value:"<code>waitFor</code> and <code>waitForElement</code>",id:"waitfor-and-waitforelement",level:3}],u={toc:s},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"testing-library"},"Testing Library"),(0,a.kt)("h2",{id:"purpose"},"Purpose"),(0,a.kt)("p",null,"You want to write maintainable tests that give you high confidence that your components are working\nfor your users. There are many open-source testing libraries designed for React and React-like\nframeworks. The most popular one of them is the ",(0,a.kt)("a",{parentName:"p",href:"https://testing-library.com/"},"testing library")," that\nprovides friendly and universal APIs to write scalable test cases."),(0,a.kt)("p",null,"We provides a binding for the ",(0,a.kt)("a",{parentName:"p",href:"https://testing-library.com/"},"testing library")," called\n",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@goji/testing-library"},"@goji/testing-library"),", which should work well\nwith Jest and others test runners."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"For npm users,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @goji/testing-library --save-dev\n")),(0,a.kt)("p",null,"For yarn users,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @goji/testing-library --dev\n")),(0,a.kt)("p",null,"Read the ",(0,a.kt)("a",{parentName:"p",href:"https://jestjs.io/"},"Jest documentation")," to setup a Jest config file. You can copy these\nthree files, ",(0,a.kt)("inlineCode",{parentName:"p"},"jest.config.js"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"jestFileMock.js")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"jestBabelTransform.js")," from\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/airbnb/goji-js/tree/master/packages/demo-todomvc"},"here")," to your project."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { useState } from 'react';\nimport { render, fireEvent } from '@goji/testing-library';\nimport { Input } from '@goji/core';\n\nconst ExampleInput = ({ onSave }: { onSave: (value: string) => void }) => {\n  const [value, setValue] = useState('');\n\n  return (\n    <Input\n      testID=\"example-input\"\n      value={value}\n      onInput={e => setValue(e.detail.value)}\n      onConfirm={() => {\n        onSave(value);\n        setValue('');\n      }}\n    />\n  );\n};\n\ndescribe('example input', () => {\n  it('works', () => {\n    const onSave = jest.fn();\n    const wrapper = render(<ExampleInput onSave={onSave} />);\n    const input = wrapper.getByTestId('example-input');\n    expect(input).toBeTruthy();\n\n    // input\n    fireEvent.input(input, 'hi');\n    expect(input.props.value).toBe('hi');\n\n    // confirm and then cleanup\n    fireEvent.confirm(input);\n    expect(onSave).toBeCalledTimes(1);\n    expect(onSave).toBeCalledWith('hi');\n    expect(input.props.value).toBe('');\n  });\n});\n")),(0,a.kt)("h2",{id:"api"},"API"),(0,a.kt)("h3",{id:"render"},(0,a.kt)("inlineCode",{parentName:"h3"},"render")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"render")," will run the components in NodeJS by\n",(0,a.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/test-renderer.html"},"React Test Renderer"),". It mount the components and run\ntheir lifecycles as the same way as real Mini Programs."),(0,a.kt)("p",null,"It returns a wrapper so you can find and enter the specific children element by different queries.\nIn this case ",(0,a.kt)("inlineCode",{parentName:"p"},"getByTestId")," returns the first element which matches the ",(0,a.kt)("inlineCode",{parentName:"p"},"testID")," property."),(0,a.kt)("h3",{id:"render-options"},(0,a.kt)("inlineCode",{parentName:"h3"},"render")," Options"),(0,a.kt)("h4",{id:"queries"},"Queries"),(0,a.kt)("p",null,"GojiJS provides several types of queries, all of them are combined from variants and ",(0,a.kt)("inlineCode",{parentName:"p"},"By-")," queries.\nThey follow the best practices from the testing library. You can find more information\n",(0,a.kt)("a",{parentName:"p",href:"https://testing-library.com/docs/dom-testing-library/api-queries"},"here"),"."),(0,a.kt)("p",null,"Variants:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"getBy"),(0,a.kt)("li",{parentName:"ul"},"getAllBy"),(0,a.kt)("li",{parentName:"ul"},"queryBy"),(0,a.kt)("li",{parentName:"ul"},"queryAllBy"),(0,a.kt)("li",{parentName:"ul"},"findBy"),(0,a.kt)("li",{parentName:"ul"},"findAllBy")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"By-")," queries:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ByTestId(testId: string)")," : matches the ",(0,a.kt)("inlineCode",{parentName:"li"},"testID")," property"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ByText(text: string | RegExp | ((text: string, node: ReactTestInstance) => boolean))")," : matches\nelement's inner text, for more details see\n",(0,a.kt)("a",{parentName:"li",href:"https://testing-library.com/docs/queries/about/#textmatch"},"TextMatch")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ByProp(propKey: string, propValue: string)")," : matches specific property")),(0,a.kt)("p",null,"We recommend to use ",(0,a.kt)("inlineCode",{parentName:"p"},"testID")," because it doesn't affect any runtime cost."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Feel free to ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/airbnb/goji-js/issues"},"create an issue")," if you'd like to append\nnew queries.")),(0,a.kt)("h4",{id:"debug"},(0,a.kt)("inlineCode",{parentName:"h4"},"debug")),(0,a.kt)("p",null,"This methods print the elements in console for debug purpose."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const wrapper = render(<Comp />);\n// print all elements\nwrapper.debug();\n// print specific elements\nwrapper.debug(wrapper.getByTextId('test'));\n")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/1812118/89996259-28396080-dcbd-11ea-9e4d-f031c65b835f.png",alt:"demo of debug"})),(0,a.kt)("h3",{id:"within"},(0,a.kt)("inlineCode",{parentName:"h3"},"within")),(0,a.kt)("p",null,"If you'd like to restrict your query in specific container, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"within"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const Comp = () => (\n  <View testID=\"view\">\n    <Button>Click me</Button>\n  </View>\n);\nconst wrapper = render(<Comp />);\nconst view = wrapper.getByTestId('view');\nconst buttonInsideView = within(view).getByText('Click me');\n")),(0,a.kt)("h3",{id:"fireevent"},(0,a.kt)("inlineCode",{parentName:"h3"},"fireEvent")),(0,a.kt)("p",null,"In your test cases, if you'd like to simulates the interactive events on the elements the\n",(0,a.kt)("inlineCode",{parentName:"p"},"fireEvent.[event]")," could help."),(0,a.kt)("p",null,"For example, to input text into the ",(0,a.kt)("inlineCode",{parentName:"p"},'<Input testID="my-test-id">')," element, you can use,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const input = wrapper.getByTestId('my-test-id');\nfireEvent.input(input, 'hello, world!');\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"fireEvent")," supports these events,"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"tap"),(0,a.kt)("li",{parentName:"ul"},"input"),(0,a.kt)("li",{parentName:"ul"},"confirm")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Feel free to ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/airbnb/goji-js/issues"},"create an issue")," if you'd like to use new\nevents.")),(0,a.kt)("h3",{id:"act"},(0,a.kt)("inlineCode",{parentName:"h3"},"act")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"act")," function has same behavior in\n",(0,a.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/test-renderer.html#testrendereract"},"React Test Renderer"),". Usually you\nshould wrap the async component updating in ",(0,a.kt)("inlineCode",{parentName:"p"},"act"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"let increase: Function;\nconst Comp = () => {\n  const [count, setCount] = useState(0);\n  increase = () => setCount(count + 1);\n\n  return <View>Count: {count}</View>;\n};\nconst wrapper = render(<Comp />);\nact(() => {\n  // update component\n  increase();\n});\nexpect(wrapper.getByText('Count: 1')).toBeTruthy;\n")),(0,a.kt)("p",null,"Please note that all ",(0,a.kt)("inlineCode",{parentName:"p"},"fireEvent")," methods are already wrapped by ",(0,a.kt)("inlineCode",{parentName:"p"},"act")," so there is no need to wrap\nagain."),(0,a.kt)("h3",{id:"waitfor-and-waitforelement"},(0,a.kt)("inlineCode",{parentName:"h3"},"waitFor")," and ",(0,a.kt)("inlineCode",{parentName:"h3"},"waitForElement")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"waitFor")," catches the assertion error util it passed, otherwise throw after timeout. It's used for\nasync component tests."),(0,a.kt)("p",null,"Here is an example,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"await waitFor(() => expect(wrapper.getByText('hello')).toBeTruthy());\n")),(0,a.kt)("p",null,"It equals to,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"await waitForElement(() => wrapper.getByText('hello'));\n")))}d.isMDXComponent=!0}}]);